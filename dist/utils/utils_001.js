"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataLog = exports.RequestLog = exports.ErrorLog = exports.Log = exports.stringify = exports.removeDuplicates = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const express_async_handler_1 = tslib_1.__importDefault(require("express-async-handler"));
const removeDuplicates = (...args) => {
    let tmp = [];
    for (let k of args) {
        if (tmp.includes(k))
            continue;
        tmp.push(k);
    }
    return tmp;
};
exports.removeDuplicates = removeDuplicates;
const stringify = function (line, depth = 0) {
    let ltt = Array(depth).fill("  ").join("");
    switch (typeof line) {
        case "string":
            return `"${line}"`;
        case "number":
            return line.toString();
        case "bigint":
            return line.toString();
        case "undefined":
            return "undefined";
        case "boolean":
            return line ? "true" : "false";
        case "function":
            const { name } = line;
            let lj = line
                .toString()
                .split("\n")
                .map((v) => `  ${ltt}${v}`)
                .join("\n");
            return `${name ? name : "anonymous"}:\n${lj}`;
        case "object":
            if (Array.isArray(line)) {
                return `[\n${line
                    .map((v) => `${ltt}  ${(0, exports.stringify)(v, depth++)}`)
                    .join(",\n")}\n${ltt}]`;
            }
            let jl = Object.keys(line);
            let output = `{\n${jl
                .map((v) => ` ${ltt}${v}: ${(0, exports.stringify)(line[v], depth++)},`)
                .join("\n")}\n${ltt}}`;
            return output;
        default:
            return "NotAString";
    }
};
exports.stringify = stringify;
let j = {
    ji: "hi",
    k: { a: "a", b: ["hallelujah", "you", "have", "overcome", "the", "grave"] },
};
const dev_logs = "./dev/logs";
if (!fs_1.default.existsSync(dev_logs)) {
    try {
        fs_1.default.mkdirSync(dev_logs, { recursive: true });
    }
    catch (err) { }
}
const Log = async function (line) {
    let date = Date();
    line = `${date} ${line}`;
    fs_1.default.writeFileSync(`${dev_logs}/log_.txt`, line + "\n", {
        encoding: "utf-8",
        flag: "a+",
    });
    console.log(line);
    return line;
};
exports.Log = Log;
const ErrorLog = async function (line) {
    (0, exports.Log)(`Error: ${(0, exports.stringify)(line)}`).then((v) => fs_1.default.writeFileSync(`${dev_logs}/log_errors.txt`, line + "\n", {
        encoding: "utf-8",
        flag: "a+",
    }));
};
exports.ErrorLog = ErrorLog;
exports.RequestLog = (0, express_async_handler_1.default)(async function (req, res, callNext) {
    let { originalUrl, ip, method } = req;
    res.on("finish", () => {
        const { statusCode } = res;
        (0, exports.Log)(`${statusCode}  ${method}  ${ip}  ${originalUrl}`).then((line) => {
            fs_1.default.writeFileSync(`${dev_logs}/log_requests.txt`, line + "\n", {
                encoding: "utf-8",
                flag: "a+",
            });
        });
    });
    callNext();
});
const DataLog = async function (file_name, line) {
    (0, exports.Log)(`Data Log: ${(0, exports.stringify)(line)}`).then((v) => {
        let isTextFile = file_name.endsWith(".txt");
        fs_1.default.writeFileSync(`${dev_logs}/${isTextFile ? file_name : file_name + ".txt"}`, line + "\n", {
            encoding: "utf-8",
            flag: "a+",
        });
    });
};
exports.DataLog = DataLog;
//# sourceMappingURL=data:application/json;base64,