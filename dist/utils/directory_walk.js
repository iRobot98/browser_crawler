"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.read_dirs = exports.store = void 0;
const tslib_1 = require("tslib");
const fs_1 = tslib_1.__importDefault(require("fs"));
const utils_001_1 = require("./utils_001");
const fetch_dirs = (p_th = ".") => fs_1.default.readdirSync(p_th, { encoding: "utf-8", withFileTypes: true });
const invalid_folders = [".git", "node_modules", ".vscode", "dist"];
const invalid_file_types = [".txt"];
const filter_invalid_dirs = (v) => v.isDirectory() && !invalid_folders.includes(v.name);
const add_dir = (p) => {
    let d = fetch_dirs(p).filter(filter_invalid_dirs);
    let j = [];
    for (let k of d) {
        if (k.isDirectory()) {
            let n = `${p}/${k.name}`;
            j.push(n, ...add_dir(n));
        }
    }
    return j;
};
exports.store = {
    files: [],
    dirs: [],
};
if (!fs_1.default.existsSync("./dev/data"))
    fs_1.default.mkdirSync("./dev/data", { recursive: true });
setInterval(() => {
    (0, exports.read_dirs)()
        .then(() => fs_1.default.writeFileSync("./dev/data/fileslist.json", JSON.stringify(exports.store), {
        flag: "w",
        encoding: "utf-8",
    }))
        .then(() => console.log("files_list updated"));
}, 60 * 1000);
const read_dirs = async (Path = ".") => {
    exports.store.dirs = add_dir(Path);
    exports.store.dirs.forEach((k) => exports.store.files.push(...fetch_dirs(k)
        .filter((v) => !v.isDirectory())
        .map((v) => `${k}/${v.name}`)
        .filter((v) => {
        for (let k of invalid_file_types)
            if (v.includes(k))
                return false;
        return true;
    })));
    exports.store.dirs = (0, utils_001_1.removeDuplicates)(...exports.store.dirs);
    exports.store.files = (0, utils_001_1.removeDuplicates)(...exports.store.files);
};
exports.read_dirs = read_dirs;
(0, exports.read_dirs)();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiZGlyZWN0b3J5X3dhbGsuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi91dGlscy9kaXJlY3Rvcnlfd2Fsay50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7O0FBQUEsb0RBQW9CO0FBRXBCLDJDQUErQztBQUUvQyxNQUFNLFVBQVUsR0FBRyxDQUFDLElBQUksR0FBRyxHQUFHLEVBQUUsRUFBRSxDQUNoQyxZQUFFLENBQUMsV0FBVyxDQUFDLElBQUksRUFBRSxFQUFFLFFBQVEsRUFBRSxPQUFPLEVBQUUsYUFBYSxFQUFFLElBQUksRUFBRSxDQUFDLENBQUM7QUFFbkUsTUFBTSxlQUFlLEdBQUcsQ0FBQyxNQUFNLEVBQUUsY0FBYyxFQUFFLFNBQVMsRUFBRSxNQUFNLENBQUMsQ0FBQztBQUNwRSxNQUFNLGtCQUFrQixHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7QUFFcEMsTUFBTSxtQkFBbUIsR0FBRyxDQUFDLENBQU0sRUFBRSxFQUFFLENBQ3JDLENBQUMsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDLGVBQWUsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDO0FBRXZELE1BQU0sT0FBTyxHQUFHLENBQUMsQ0FBUyxFQUFFLEVBQUU7SUFDNUIsSUFBSSxDQUFDLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxtQkFBbUIsQ0FBQyxDQUFDO0lBQ2xELElBQUksQ0FBQyxHQUFhLEVBQUUsQ0FBQztJQUNyQixLQUFLLElBQUksQ0FBQyxJQUFJLENBQUMsRUFBRTtRQUNmLElBQUksQ0FBQyxDQUFDLFdBQVcsRUFBRSxFQUFFO1lBQ25CLElBQUksQ0FBQyxHQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztZQUN6QixDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsRUFBRSxHQUFHLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQzFCO0tBQ0Y7SUFDRCxPQUFPLENBQUMsQ0FBQztBQUNYLENBQUMsQ0FBQztBQUVXLFFBQUEsS0FBSyxHQUF3QztJQUN4RCxLQUFLLEVBQUUsRUFBRTtJQUNULElBQUksRUFBRSxFQUFFO0NBQ1QsQ0FBQztBQUVGLElBQUksQ0FBQyxZQUFFLENBQUMsVUFBVSxDQUFDLFlBQVksQ0FBQztJQUM5QixZQUFFLENBQUMsU0FBUyxDQUFDLFlBQVksRUFBRSxFQUFFLFNBQVMsRUFBRSxJQUFJLEVBQUUsQ0FBQyxDQUFDO0FBRWxELFdBQVcsQ0FBQyxHQUFHLEVBQUU7SUFDZixJQUFBLGlCQUFTLEdBQUU7U0FDUixJQUFJLENBQUMsR0FBRyxFQUFFLENBQ1QsWUFBRSxDQUFDLGFBQWEsQ0FBQywyQkFBMkIsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLGFBQUssQ0FBQyxFQUFFO1FBQ25FLElBQUksRUFBRSxHQUFHO1FBQ1QsUUFBUSxFQUFFLE9BQU87S0FDbEIsQ0FBQyxDQUNIO1NBQ0EsSUFBSSxDQUFDLEdBQUcsRUFBRSxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsb0JBQW9CLENBQUMsQ0FBQyxDQUFDO0FBQ25ELENBQUMsRUFBRSxFQUFFLEdBQUcsSUFBSSxDQUFDLENBQUM7QUFFUCxNQUFNLFNBQVMsR0FBRyxLQUFLLEVBQUUsSUFBSSxHQUFHLEdBQUcsRUFBRSxFQUFFO0lBQzVDLGFBQUssQ0FBQyxJQUFJLEdBQUcsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDO0lBQzNCLGFBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FDdkIsYUFBSyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQ2QsR0FBRyxVQUFVLENBQUMsQ0FBQyxDQUFDO1NBQ2IsTUFBTSxDQUFDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxXQUFXLEVBQUUsQ0FBQztTQUMvQixHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxJQUFJLEVBQUUsQ0FBQztTQUM1QixNQUFNLENBQUMsQ0FBQyxDQUFDLEVBQUUsRUFBRTtRQUNaLEtBQUssSUFBSSxDQUFDLElBQUksa0JBQWtCO1lBQUUsSUFBSSxDQUFDLENBQUMsUUFBUSxDQUFDLENBQUMsQ0FBQztnQkFBRSxPQUFPLEtBQUssQ0FBQztRQUNsRSxPQUFPLElBQUksQ0FBQztJQUNkLENBQUMsQ0FBQyxDQUNMLENBQ0YsQ0FBQztJQUNGLGFBQUssQ0FBQyxJQUFJLEdBQUcsSUFBQSw0QkFBZ0IsRUFBQyxHQUFHLGFBQUssQ0FBQyxJQUFJLENBQUMsQ0FBQztJQUM3QyxhQUFLLENBQUMsS0FBSyxHQUFHLElBQUEsNEJBQWdCLEVBQUMsR0FBRyxhQUFLLENBQUMsS0FBSyxDQUFDLENBQUM7QUFDakQsQ0FBQyxDQUFDO0FBZlcsUUFBQSxTQUFTLGFBZXBCO0FBRUYsSUFBQSxpQkFBUyxHQUFFLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgZnMgZnJvbSBcImZzXCI7XHJcbmltcG9ydCBwYXRoIGZyb20gXCJwYXRoXCI7XHJcbmltcG9ydCB7IHJlbW92ZUR1cGxpY2F0ZXMgfSBmcm9tIFwiLi91dGlsc18wMDFcIjtcclxuXHJcbmNvbnN0IGZldGNoX2RpcnMgPSAocF90aCA9IFwiLlwiKSA9PlxyXG4gIGZzLnJlYWRkaXJTeW5jKHBfdGgsIHsgZW5jb2Rpbmc6IFwidXRmLThcIiwgd2l0aEZpbGVUeXBlczogdHJ1ZSB9KTtcclxuXHJcbmNvbnN0IGludmFsaWRfZm9sZGVycyA9IFtcIi5naXRcIiwgXCJub2RlX21vZHVsZXNcIiwgXCIudnNjb2RlXCIsIFwiZGlzdFwiXTtcclxuY29uc3QgaW52YWxpZF9maWxlX3R5cGVzID0gW1wiLnR4dFwiXTtcclxuXHJcbmNvbnN0IGZpbHRlcl9pbnZhbGlkX2RpcnMgPSAodjogYW55KSA9PlxyXG4gIHYuaXNEaXJlY3RvcnkoKSAmJiAhaW52YWxpZF9mb2xkZXJzLmluY2x1ZGVzKHYubmFtZSk7XHJcblxyXG5jb25zdCBhZGRfZGlyID0gKHA6IHN0cmluZykgPT4ge1xyXG4gIGxldCBkID0gZmV0Y2hfZGlycyhwKS5maWx0ZXIoZmlsdGVyX2ludmFsaWRfZGlycyk7XHJcbiAgbGV0IGo6IHN0cmluZ1tdID0gW107XHJcbiAgZm9yIChsZXQgayBvZiBkKSB7XHJcbiAgICBpZiAoay5pc0RpcmVjdG9yeSgpKSB7XHJcbiAgICAgIGxldCBuID0gYCR7cH0vJHtrLm5hbWV9YDtcclxuICAgICAgai5wdXNoKG4sIC4uLmFkZF9kaXIobikpO1xyXG4gICAgfVxyXG4gIH1cclxuICByZXR1cm4gajtcclxufTtcclxuXHJcbmV4cG9ydCBjb25zdCBzdG9yZTogeyBmaWxlczogc3RyaW5nW107IGRpcnM6IHN0cmluZ1tdIH0gPSB7XHJcbiAgZmlsZXM6IFtdLFxyXG4gIGRpcnM6IFtdLFxyXG59O1xyXG5cclxuaWYgKCFmcy5leGlzdHNTeW5jKFwiLi9kZXYvZGF0YVwiKSlcclxuICBmcy5ta2RpclN5bmMoXCIuL2Rldi9kYXRhXCIsIHsgcmVjdXJzaXZlOiB0cnVlIH0pO1xyXG5cclxuc2V0SW50ZXJ2YWwoKCkgPT4ge1xyXG4gIHJlYWRfZGlycygpXHJcbiAgICAudGhlbigoKSA9PlxyXG4gICAgICBmcy53cml0ZUZpbGVTeW5jKFwiLi9kZXYvZGF0YS9maWxlc2xpc3QuanNvblwiLCBKU09OLnN0cmluZ2lmeShzdG9yZSksIHtcclxuICAgICAgICBmbGFnOiBcIndcIixcclxuICAgICAgICBlbmNvZGluZzogXCJ1dGYtOFwiLFxyXG4gICAgICB9KVxyXG4gICAgKVxyXG4gICAgLnRoZW4oKCkgPT4gY29uc29sZS5sb2coXCJmaWxlc19saXN0IHVwZGF0ZWRcIikpO1xyXG59LCA2MCAqIDEwMDApO1xyXG5cclxuZXhwb3J0IGNvbnN0IHJlYWRfZGlycyA9IGFzeW5jIChQYXRoID0gXCIuXCIpID0+IHtcclxuICBzdG9yZS5kaXJzID0gYWRkX2RpcihQYXRoKTtcclxuICBzdG9yZS5kaXJzLmZvckVhY2goKGspID0+XHJcbiAgICBzdG9yZS5maWxlcy5wdXNoKFxyXG4gICAgICAuLi5mZXRjaF9kaXJzKGspXHJcbiAgICAgICAgLmZpbHRlcigodikgPT4gIXYuaXNEaXJlY3RvcnkoKSlcclxuICAgICAgICAubWFwKCh2KSA9PiBgJHtrfS8ke3YubmFtZX1gKVxyXG4gICAgICAgIC5maWx0ZXIoKHYpID0+IHtcclxuICAgICAgICAgIGZvciAobGV0IGsgb2YgaW52YWxpZF9maWxlX3R5cGVzKSBpZiAodi5pbmNsdWRlcyhrKSkgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfSlcclxuICAgIClcclxuICApO1xyXG4gIHN0b3JlLmRpcnMgPSByZW1vdmVEdXBsaWNhdGVzKC4uLnN0b3JlLmRpcnMpO1xyXG4gIHN0b3JlLmZpbGVzID0gcmVtb3ZlRHVwbGljYXRlcyguLi5zdG9yZS5maWxlcyk7XHJcbn07XHJcblxyXG5yZWFkX2RpcnMoKTtcclxuIl19